<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        ">

	<context:property-placeholder location="classpath:/config/jdbc.properties" />
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- 数据库连接 -->
		<property name="driverClass">
			<value>${jdbc.driver}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- c3p0 配置 -->
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<property name="acquireRetryDelay" value="1000" />
		<property name="autoCommitOnClose" value="false" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。 但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。 
			如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。 Default: false -->
		<property name="breakAfterAcquireFailure" value="false" />
		<property name="checkoutTimeout" value="5000" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。 Default: 3 -->
		<property name="initialPoolSize" value="10" />
		<property name="loginTimeout" value="1800" />
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="5" />
		<!--连接池中保留的最大连接数。 Default: 15 -->
		<property name="maxPoolSize" value="15" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。 若为0则永不丢弃。 Default: 0 -->
		<property name="maxIdleTime" value="60" />
		<property name="maxStatements" value="100" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements 属于单个connection而不是整个连接池。 
			所以设置这个参数需要考虑到多方面的因素。 如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。 
			Default: 0 -->
		<property name="maxStatementsPerConnection" value="100" />
		<property name="numHelperThreads" value="3" />
		<property name="propertyCycle" value="300" />
		<property name="preferredTestQuery" value="true" />
		<property name="testConnectionOnCheckin" value="true" />
		<!--因性能消耗大请只在需要的时候使用它。 如果设为true那么在每个connection提交的 时候都将校验其有效性。 建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。 
			Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
		<property name="usesTraditionalReflectiveProxies" value="false" />
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<!-- <prop key="hibernate.connection.autocommit">true</prop> -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
			</props>
		</property>

		<!-- 自动扫描注解方式配置的hibernate类文件 -->
		<property name="packagesToScan">
			<list>
				<value>com.deilsky.springmvc.entity</value>
			</list>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 配置事务异常封装 -->
	<bean id="persistenceExceptionTranslationPostProcessor"
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	<!-- 配合<tx:advice>和<aop:advisor>完成了事务切面的定义 -->
	<!-- 使用强大的切点表达式是语言轻松定义目标方法 -->
	<aop:config proxy-target-class="true">
		<!-- 通过aop定义事务增强切面 -->
		<aop:pointcut expression=" execution(* com.deilsky.springmvc.service.*.*(..))"
			id="serviceMethod" />
		<!-- 引用事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />
	</aop:config>
	<!-- 事务增强 -->
	<!-- 配置事务通知属性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 定义事务传播属性 -->
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- <aop:config> <aop:pointcut id="serviceOperation" expression="execution(* 
		com.deilsky.rural_trading.service.*.* (..) )" /> <aop:advisor advice-ref="txAdvice" 
		pointcut-ref="serviceOperation" /> </aop:config> -->
</beans>  